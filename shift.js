// shift.js - –ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π SHIFT Extension

console.log('SHIFT Extension: –ó–∞–≥—Ä—É–∂–µ–Ω shift.js');

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–ô
// ============================================================================

const SHIFT_SOLUTIONS = [
    {
        solutionCode: 'super-slider',
        blockCode: 'SHF001',
        title: '–°—É–ø–µ—Ä –°–ª–∞–π–¥–µ—Ä',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π',
        img: 'https://static.tildacdn.com/lib/tscripts/tplicons/tpl_21.png',
        isFree: true,
        htmlContent: `
<div id="solution-super-slider" class="feature-block">
    <h3>üé† –°—É–ø–µ—Ä –°–ª–∞–π–¥–µ—Ä</h3>
    <p>–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –°—É–ø–µ—Ä –°–ª–∞–π–¥–µ—Ä–∞.</p>
    
    <style>
        .shift-slider { position: relative; overflow: hidden; border-radius: 8px; margin: 20px 0; }
        .shift-slider__container { display: flex; transition: transform 0.3s ease; }
        .shift-slider__slide { min-width: 100%; padding: 40px; color: white; text-align: center; }
        .shift-slider__controls { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); display: flex; gap: 10px; }
        .shift-slider__btn { width: 12px; height: 12px; border-radius: 50%; border: 2px solid white; background: transparent; cursor: pointer; }
        .shift-slider__btn.active { background: white; }
    </style>
    
    <div class="shift-slider">
        <div class="shift-slider__container">
            <div class="shift-slider__slide" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <h2>–°–ª–∞–π–¥ 1</h2>
                <p>–ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ —Å –∫—Ä–∞—Å–∏–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º</p>
            </div>
            <div class="shift-slider__slide" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                <h2>–°–ª–∞–π–¥ 2</h2>
                <p>–í—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥ —Å –¥—Ä—É–≥–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º</p>
            </div>
            <div class="shift-slider__slide" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                <h2>–°–ª–∞–π–¥ 3</h2>
                <p>–¢—Ä–µ—Ç–∏–π —Å–ª–∞–π–¥ —Å —Å–∏–Ω–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º</p>
            </div>
        </div>
        <div class="shift-slider__controls">
            <button class="shift-slider__btn active" data-slide="0"></button>
            <button class="shift-slider__btn" data-slide="1"></button>
            <button class="shift-slider__btn" data-slide="2"></button>
        </div>
    </div>
    
    <script>
        (function() {
            var currentSlide = 0;
            var container = document.querySelector('.shift-slider__container');
            var buttons = document.querySelectorAll('.shift-slider__btn');
            
            if (!container || !buttons.length) return;
            
            function showSlide(index) {
                currentSlide = index;
                container.style.transform = 'translateX(-' + (index * 100) + '%)';
                buttons.forEach(function(btn, i) {
                    btn.classList.toggle('active', i === index);
                });
            }
            
            buttons.forEach(function(btn, index) {
                btn.addEventListener('click', function() { showSlide(index); });
            });
            
            setInterval(function() {
                currentSlide = (currentSlide + 1) % 3;
                showSlide(currentSlide);
            }, 5000);
        })();
    </script>
</div>
        `
    },
    {
        solutionCode: 'super-grid',
        blockCode: 'SHF002',
        title: '–°—É–ø–µ—Ä –ì—Ä–∏–¥',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –≥—Ä–∏–¥-—Å–µ—Ç–∫–∏',
        img: 'https://static.tildacdn.com/lib/tscripts/tplicons/tpl_20.png',
        isFree: true,
        htmlContent: `
<div id="solution-super-grid" class="feature-block">
    <h3>üìê –°—É–ø–µ—Ä –ì—Ä–∏–¥</h3>
    <p>–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –°—É–ø–µ—Ä –ì—Ä–∏–¥–∞.</p>
    
    <style>
        .shift-grid { display: grid; grid-template-columns: repeat(12, 1fr); gap: 20px; padding: 20px; margin: 20px 0; }
        .shift-grid__item { padding: 20px; background: #f8f9fa; border-radius: 8px; border: 1px solid #e0e0e0; }
    </style>
    
    <div class="shift-grid">
        <div class="shift-grid__item" style="grid-column: span 4;">
            <h3>–ö–æ–ª–æ–Ω–∫–∞ 1</h3>
            <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏</p>
        </div>
        <div class="shift-grid__item" style="grid-column: span 4;">
            <h3>–ö–æ–ª–æ–Ω–∫–∞ 2</h3>
            <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏</p>
        </div>
        <div class="shift-grid__item" style="grid-column: span 4;">
            <h3>–ö–æ–ª–æ–Ω–∫–∞ 3</h3>
            <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏</p>
        </div>
    </div>
</div>
        `
    },
    {
        solutionCode: 'grid-stacks',
        blockCode: 'SHF003',
        title: '–ì—Ä–∏–¥-—Å—Ç–µ–∫–∏',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏',
        img: 'https://static.tildacdn.com/lib/tscripts/tplicons/tpl_columns.png',
        isFree: true,
        htmlContent: `
<div id="solution-grid-stacks" class="feature-block">
    <h3>üìö –ì—Ä–∏–¥-—Å—Ç–µ–∫–∏</h3>
    <p>–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ì—Ä–∏–¥-—Å—Ç–µ–∫–æ–≤.</p>
    
    <style>
        .shift-grid-stacks { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; padding: 20px; margin: 20px 0; }
        .shift-stack { background: #fff; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; transition: transform 0.3s ease; }
        .shift-stack:hover { transform: translateY(-5px); }
        .shift-stack__header { color: white; padding: 20px; }
        .shift-stack__content { padding: 20px; }
    </style>
    
    <div class="shift-grid-stacks">
        <div class="shift-stack">
            <div class="shift-stack__header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <h3 style="margin: 0; font-size: 18px;">–°—Ç–µ–∫ 1</h3>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–µ–∫–∞</p>
            </div>
            <div class="shift-stack__content">
                <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–µ–∫–∞ —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.</p>
                <button style="background: #667eea; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; margin-top: 10px;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
            </div>
        </div>
        <div class="shift-stack">
            <div class="shift-stack__header" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                <h3 style="margin: 0; font-size: 18px;">–°—Ç–µ–∫ 2</h3>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–µ–∫–∞</p>
            </div>
            <div class="shift-stack__content">
                <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–µ–∫–∞ —Å –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.</p>
                <button style="background: #f093fb; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; margin-top: 10px;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
            </div>
        </div>
        <div class="shift-stack">
            <div class="shift-stack__header" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                <h3 style="margin: 0; font-size: 18px;">–°—Ç–µ–∫ 3</h3>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å—Ç–µ–∫–∞</p>
            </div>
            <div class="shift-stack__content">
                <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å—Ç–µ–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.</p>
                <button style="background: #4facfe; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; margin-top: 10px;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
            </div>
        </div>
    </div>
</div>
        `
    },
    {
        solutionCode: 'custom-html',
        blockCode: 'T123',
        title: '–ö–∞—Å—Ç–æ–º–Ω—ã–π HTML',
        description: '–°–≤–æ–±–æ–¥–Ω—ã–π HTML –±–ª–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏',
        img: 'https://static.tildacdn.com/lib/tscripts/tplicons/tpl_html.png',
        isFree: true,
        htmlContent: `
<div id="solution-custom-html" class="feature-block">
    <h3>üîß –ö–∞—Å—Ç–æ–º–Ω—ã–π HTML</h3>
    <p>–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ö–∞—Å—Ç–æ–º–Ω–æ–≥–æ HTML.</p>
    
    <style>
        .shift-custom-html { padding: 40px; text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 12px; margin: 20px 0; }
        .shift-features { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
        .shift-feature { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 8px; backdrop-filter: blur(10px); }
        .shift-cta { background: rgba(255,255,255,0.2); color: white; border: 2px solid white; padding: 15px 30px; border-radius: 25px; font-size: 16px; cursor: pointer; transition: all 0.3s ease; backdrop-filter: blur(10px); }
        .shift-cta:hover { background: white; color: #667eea; transform: translateY(-2px); }
    </style>
    
    <div class="shift-custom-html">
        <div class="shift-custom-content">
            <h2 style="margin: 0 0 20px 0; font-size: 32px; font-weight: 300;">–ö–∞—Å—Ç–æ–º–Ω—ã–π HTML</h2>
            <p style="margin: 0 0 30px 0; font-size: 18px; opacity: 0.9;">–≠—Ç–æ—Ç –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é SHIFT Extension</p>
            
            <div class="shift-features">
                <div class="shift-feature">
                    <div style="font-size: 24px; margin-bottom: 10px;">üöÄ</div>
                    <h4 style="margin: 0 0 10px 0;">–ë—ã—Å—Ç—Ä–æ</h4>
                    <p style="margin: 0; font-size: 14px; opacity: 0.8;">–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤</p>
                </div>
                <div class="shift-feature">
                    <div style="font-size: 24px; margin-bottom: 10px;">üé®</div>
                    <h4 style="margin: 0 0 10px 0;">–ö—Ä–∞—Å–∏–≤–æ</h4>
                    <p style="margin: 0; font-size: 14px; opacity: 0.8;">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω</p>
                </div>
                <div class="shift-feature">
                    <div style="font-size: 24px; margin-bottom: 10px;">‚ö°</div>
                    <h4 style="margin: 0 0 10px 0;">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ</h4>
                    <p style="margin: 0; font-size: 14px; opacity: 0.8;">–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥</p>
                </div>
            </div>
            
            <button class="shift-cta">–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</button>
        </div>
    </div>
    
    <script>
        (function() {
            var ctaButton = document.querySelector('.shift-cta');
            if (ctaButton) {
                ctaButton.addEventListener('click', function() {
                    alert('SHIFT Extension —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ');
                });
            }
        })();
    </script>
</div>
        `
    }
];

// ============================================================================
// –£–¢–ò–õ–ò–¢–´
// ============================================================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª–æ–∫–∞
 */
function generateUniqueId() {
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 10000);
    return timestamp + random;
}

/**
 * –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
function waitForElement(selector) {
    return new Promise(resolve => {
        if (document.querySelector(selector)) {
            return resolve(document.querySelector(selector));
        }

        const observer = new MutationObserver(mutations => {
            if (document.querySelector(selector)) {
                resolve(document.querySelector(selector));
                observer.disconnect();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });
}

/**
 * –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Tilda API
 */
function waitForTildaAPI() {
    return new Promise((resolve) => {
        console.log('[SHIFT] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Tilda API...');
        
        let attempts = 0;
        const maxAttempts = 100; // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        const interval = 100; // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
        
        const checkAPI = () => {
            attempts++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Tilda API
            const tpAddRecord = typeof window.tp__addRecord === 'function';
            const panelEditRecord = typeof window.panel__editrecord === 'function';
            const tpLibraryHide = typeof window.tp__library__hide === 'function';
            const recordDel = typeof window.record__del === 'function';
            const recordOnoff = typeof window.record__onoff === 'function';
            
            if (tpAddRecord && panelEditRecord) {
                console.log('[SHIFT] –û—Å–Ω–æ–≤–Ω–æ–π Tilda API –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞', attempts, '–ø–æ–ø—ã—Ç–æ–∫');
                console.log('[SHIFT] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', {
                    tpAddRecord,
                    panelEditRecord,
                    tpLibraryHide,
                    recordDel,
                    recordOnoff
                });
                resolve({
                    tpAddRecord,
                    panelEditRecord,
                    tpLibraryHide,
                    recordDel,
                    recordOnoff
                });
            } else if (attempts >= maxAttempts) {
                console.log('[SHIFT] Tilda API –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞', maxAttempts, '–ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
                resolve({
                    tpAddRecord: false,
                    panelEditRecord: false,
                    tpLibraryHide: false,
                    recordDel: false,
                    recordOnoff: false
                });
            } else {
                setTimeout(checkAPI, interval);
            }
        };
        
        checkAPI();
    });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è –ø–æ –∫–æ–¥—É –±–ª–æ–∫–∞
 */
function getSolutionCodeFromBlockCode(blockCode) {
    const solution = SHIFT_SOLUTIONS.find(s => s.blockCode === blockCode);
    return solution ? solution.solutionCode : null;
}

// ============================================================================
// –°–û–ó–î–ê–ù–ò–ï –ë–õ–û–ö–û–í –í TILDA
// ============================================================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏ SHIFT –≤ dbmBlocks
 */
function createShiftBlocks() {
    console.log('[SHIFT] –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ SHIFT...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º dbmBlocks –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!window.dbmBlocks) {
        window.dbmBlocks = [];
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ SHIFT
    window.dbmBlocks = window.dbmBlocks.filter(block => 
        !block.cod.startsWith('SHF') && block.cod !== 'T123'
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
    SHIFT_SOLUTIONS.forEach(solution => {
        const block = {
            name: solution.title,
            cod: solution.blockCode,
            descr: solution.description,
            descr_ru: solution.description,
            disableforplan0: '', // –í—Å–µ –±–ª–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            icon: solution.img,
            icon2: '',
            id: "131", // –í—Å–µ–≥–¥–∞ data-tpl-id="131"
            inlib: 'y',
            filter: 'SHIFT –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            title: solution.title,
            modsettings: [],
            moddemolive: `<div class="shift-demo">–î–µ–º–æ –±–ª–æ–∫–∞ ${solution.title}</div>`,
            moddefaultsettings: {},
            runDemo: function() {
                console.log('[SHIFT] –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –¥–ª—è –±–ª–æ–∫–∞:', solution.blockCode);
            },
            modInputChange: function() {
                console.log('[SHIFT] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–∞:', solution.blockCode);
            },
            modcontent: function() {
                return solution.htmlContent;
            }
        };
        
        window.dbmBlocks.push(block);
        console.log('[SHIFT] –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', solution.blockCode, solution.title);
    });
    
    console.log('[SHIFT] –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ SHIFT —Å–æ–∑–¥–∞–Ω–æ:', SHIFT_SOLUTIONS.length);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é SHIFT –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Tilda
 */
function createShiftCategory() {
    console.log('[SHIFT] –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é SHIFT –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ...');
    
    const libraryBody = document.querySelector('.tp-library__body');
    if (!libraryBody) {
        console.error('[SHIFT] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ .tp-library__body');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    const existingCategory = libraryBody.querySelector('[data-category="SHIFT –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"]');
    if (existingCategory) {
        console.log('[SHIFT] –ö–∞—Ç–µ–≥–æ—Ä–∏—è SHIFT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryHTML = `
        <div class="tp-library__category" data-category="SHIFT –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏">
            <div class="tp-library__category-header">
                <h3 class="tp-library__category-title">SHIFT –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
                <p class="tp-library__category-description">–ö–∞—Å—Ç–æ–º–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è Tilda</p>
            </div>
            <div class="tp-library__category-content">
                ${SHIFT_SOLUTIONS.map(solution => `
                    <div class="tp-library__card" data-block-code="${solution.blockCode}" data-solution-code="${solution.solutionCode}">
                        <div class="tp-library__card-wrapper">
                            <div class="tp-library__card-image">
                                <img src="${solution.img}" alt="${solution.title}">
                            </div>
                            <div class="tp-library__card-content">
                                <h4 class="tp-library__card-title">${solution.title}</h4>
                                <p class="tp-library__card-description">${solution.description}</p>
                                ${!solution.isFree ? '<span class="tp-library__card-premium">Premium</span>' : ''}
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    libraryBody.insertAdjacentHTML('beforeend', categoryHTML);
    console.log('[SHIFT] –ö–∞—Ç–µ–≥–æ—Ä–∏—è SHIFT —Å–æ–∑–¥–∞–Ω–∞');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    addShiftCardEventListeners();
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ SHIFT
 */
function addShiftCardEventListeners() {
    console.log('[SHIFT] –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫...');
    
    const shiftCards = document.querySelectorAll('.tp-library__card[data-block-code^="SHF"], .tp-library__card[data-block-code="T123"]');
    
    shiftCards.forEach(card => {
        card.addEventListener('click', async function() {
            const blockCode = this.getAttribute('data-block-code');
            const solutionCode = this.getAttribute('data-solution-code');
            
            console.log('[SHIFT] –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –±–ª–æ–∫–∞:', blockCode);
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è
            const solution = SHIFT_SOLUTIONS.find(s => s.solutionCode === solutionCode);
            if (!solution) {
                console.error(`[SHIFT] –†–µ—à–µ–Ω–∏–µ "${solutionCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
                return;
            }
            
            console.log(`[SHIFT] –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è "${solution.title}"`);
            
            try {
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Tilda API
                const tildaAPI = await waitForTildaAPI();
                
                if (tildaAPI.tpAddRecord && tildaAPI.panelEditRecord) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
                    console.log('[SHIFT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞');
                    await addBlockWithTildaAPI(solution, tildaAPI);
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                    console.warn('[SHIFT] –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º');
                    await addBlockAlternative(solution);
                }
                
            } catch (error) {
                console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞:', error);
            }
        });
    });
    
    console.log('[SHIFT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è', shiftCards.length, '–∫–∞—Ä—Ç–æ—á–µ–∫');
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API
 */
async function addBlockWithTildaAPI(solution, tildaAPI) {
    console.log('[SHIFT] –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API...');
    
    try {
        // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫ T123 —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        console.log('[SHIFT] –í—ã–∑—ã–≤–∞–µ–º tp__addRecord...');
        window.tp__addRecord('123', window.afterid || '', true);
        
        // 2. –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        console.log('[SHIFT] –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 3. –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º Tilda)
        const newRecId = $("#allrecords .r").last().attr("id");
        if (!newRecId) {
            console.error("[SHIFT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Tilda!");
            return;
        }
        console.log(`[SHIFT] –°–µ—Ä–≤–µ—Ä Tilda —Å–æ–∑–¥–∞–ª –±–ª–æ–∫ —Å ID: ${newRecId}`);
        
        // 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        console.log('[SHIFT] –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        window.panel__editrecord(newRecId, 'content');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // 5. –í—Å—Ç–∞–≤–ª—è–µ–º HTML-–∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const htmlTextarea = document.querySelector('#ts-control-html-code');
        if (htmlTextarea) {
            htmlTextarea.value = solution.htmlContent;
            htmlTextarea.dispatchEvent(new Event('input', { bubbles: true }));
            console.log('[SHIFT] HTML-–∫–æ–¥ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞.');
            
            // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
            const saveButton = document.querySelector('.ts-btn-pro-close');
            if (saveButton) {
                console.log('[SHIFT] –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É...');
                saveButton.click();
                
                // 7. –ñ–¥–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                await new Promise(resolve => setTimeout(resolve, 800));
                console.log('[SHIFT] –ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Tilda.');
                
                // 8. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
                updateBlockMetadata(newRecId, solution);
            } else {
                console.error('[SHIFT] –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            }
        } else {
            console.error('[SHIFT] –ü–æ–ª–µ –¥–ª—è HTML-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        // 9. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –±–ª–æ–∫–æ–≤
        if (tildaAPI.tpLibraryHide) {
            window.tp__library__hide();
            console.log('[SHIFT] –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–ª–æ–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∞.');
        }
        
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º Tilda API:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ)
 */
function updateBlockMetadata(recId, solution) {
    console.log('[SHIFT] –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞:', recId);
    
    try {
        const record = document.querySelector(`#${recId}`);
        if (!record) {
            console.error('[SHIFT] –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', recId);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
        record.setAttribute('data-title', solution.title);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const titleElement = record.querySelector('[data-title]');
        if (titleElement) {
            titleElement.setAttribute('data-title', solution.title);
        }
        
        console.log('[SHIFT] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
            recId: recId,
            title: solution.title,
            blockCode: solution.blockCode
        });
        
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞:', error);
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API
 */
function deleteBlock(recId) {
    console.log('[SHIFT] –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API:', recId);
    
    try {
        if (typeof window.record__del === 'function') {
            window.record__del(recId);
            console.log('[SHIFT] –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω:', recId);
        } else {
            console.error('[SHIFT] –§—É–Ω–∫—Ü–∏—è record__del –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Tilda API');
        }
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞:', error);
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –±–ª–æ–∫–∞ (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å)
 */
function toggleBlockVisibility(recId) {
    console.log('[SHIFT] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –±–ª–æ–∫–∞:', recId);
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –ø–æ ID
        const blockElement = document.getElementById(recId);
        if (!blockElement) {
            console.error('[SHIFT] –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', recId);
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
        const toggleButton = blockElement.querySelector('.tp-record-edit-icons__item_off');
        if (toggleButton && typeof window.record__onoff === 'function') {
            window.record__onoff(toggleButton);
            console.log('[SHIFT] –í–∏–¥–∏–º–æ—Å—Ç—å –±–ª–æ–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞:', recId);
        } else {
            console.error('[SHIFT] –ö–Ω–æ–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è record__onoff –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∞:', error);
    }
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–∞
 */
function openBlockSettings(recId, panelType = 'content') {
    console.log('[SHIFT] –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–∞:', recId, '—Ç–∏–ø:', panelType);
    
    try {
        if (typeof window.panel__editrecord === 'function') {
            window.panel__editrecord(recId, panelType);
            console.log('[SHIFT] –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –±–ª–æ–∫–∞:', recId);
        } else {
            console.error('[SHIFT] –§—É–Ω–∫—Ü–∏—è panel__editrecord –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Tilda API');
        }
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
 */
async function addBlockAlternative(solution) {
    console.warn('[SHIFT] –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞!');
    console.warn('[SHIFT] –≠—Ç–æ—Ç –±–ª–æ–∫ –ù–ï –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Tilda!');
    console.log('[SHIFT] –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API
        if (typeof window.tp__addRecord === 'function') {
            console.error('[SHIFT] –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Tilda API –¥–æ—Å—Ç—É–ø–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ addBlockWithTildaAPI() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π Tilda (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const blockContainer = document.querySelector('#allrecords') || 
                              document.querySelector('.t-container') || 
                              document.querySelector('body');
        
        if (!blockContainer) {
            console.error('[SHIFT] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–ª–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª–æ–∫–∞
        const uniqueId = generateUniqueId();
        const recordId = 'record' + uniqueId;
        const recId = 'rec' + uniqueId;
        
        console.log('[SHIFT] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –±–ª–æ–∫–∞ (–æ—Ç–ª–∞–¥–∫–∞):', {
            uniqueId: uniqueId,
            recordId: recordId,
            recId: recId,
            blockCode: solution.blockCode
        });
        
        // –°–æ–∑–¥–∞–µ–º HTML –±–ª–æ–∫–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π Tilda
        const uniqueBlockCode = solution.blockCode + '_' + uniqueId;
        const blockHTML = `
            <div class="record" id="${recordId}" recordid="${recordId}" off="n" data-record-type="131" data-record-category="12" data-record-cod="${uniqueBlockCode}" data-title="${solution.title}" style="z-index: 1000; position: relative;">
                <div class="t-record-container">
                    <div id="${recId}" class="r t-rec t-rec_pt_210" style="padding-top:210px;" data-animationappear="off">
                        <!-- ${uniqueBlockCode} (–û–¢–õ–ê–î–ö–ê) -->
                        <div class="t-container">
                            <div class="t-col t-col_10 t-prefix_1">
                                <div class="tmod" style="background-color:#fff3cd; border: 2px dashed #ffc107;">
                                    <div class="tmod__header">
                                        <div class="tmod__img" style="background-image:url('${solution.img}')"></div>
                                        <div class="tmod__text">
                                            <div>‚ö†Ô∏è –û–¢–õ–ê–î–û–ß–ù–´–ô –ë–õ–û–ö: ${solution.description}</div>
                                        </div>
                                    </div>
                                    <div class="tmod__cards">
                                        <div class="tmod__card tmod__card_large">
                                            <pre><code class="hljs xml">${solution.htmlContent.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <script type="text/javascript">
                            t_onReady(function () {
                                var rec = document.querySelector('#${recId}');
                                if (!rec) return;
                                var codeBlocks = rec.querySelectorAll('pre code');
                                Array.prototype.forEach.call(codeBlocks, function (block) {
                                    t_onFuncLoadObj(function () {
                                        if (typeof hljs !== 'undefined' && hljs.highlightBlock) {
                                            hljs.highlightBlock(block);
                                        }
                                    });
                                });
                            });
                            
                            function t_onFuncLoadObj(okFunc) {
                                if (typeof hljs !== 'undefined' && hljs.highlightBlock === 'function') {
                                    okFunc();
                                } else {
                                    setTimeout(function checkFuncExist() {
                                        if (typeof hljs !== 'undefined' && hljs.highlightBlock === 'function') {
                                            okFunc();
                                            return;
                                        }
                                        if (document.readyState === 'complete' && typeof hljs !== 'undefined' && hljs.highlightBlock !== 'function') {
                                            console.warn('hljs.highlightBlock is undefined');
                                        }
                                        setTimeout(checkFuncExist, 100);
                                    });
                                }
                            }
                        </script>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        blockContainer.insertAdjacentHTML('beforeend', blockHTML);
        console.warn('[SHIFT] –û–¢–õ–ê–î–û–ß–ù–´–ô –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω –≤ DOM:', {
            recordId: recordId,
            recId: recId,
            uniqueBlockCode: uniqueBlockCode,
            solution: solution.title,
            warning: '–≠—Ç–æ—Ç –±–ª–æ–∫ –ù–ï –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!'
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –±–ª–æ–∫—É
        const newBlock = document.querySelector(`#${recId}`);
        if (newBlock) {
            newBlock.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –±–ª–æ–∫–∞:', error);
        throw error;
    }
}

// ============================================================================
// –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –û–¢–õ–ê–î–ö–ò
// ============================================================================

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.shiftDebug = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    addBlockWithTildaAPI,
    addBlockAlternative,
    deleteBlock,
    toggleBlockVisibility,
    openBlockSettings,
    updateBlockMetadata,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    waitForTildaAPI,
    generateUniqueId,
    getSolutionCodeFromBlockCode,
    
    // –î–∞–Ω–Ω—ã–µ
    SHIFT_SOLUTIONS,
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    testTildaAPI: function() {
        console.log('[SHIFT DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tilda API...');
        const api = {
            tpAddRecord: typeof window.tp__addRecord === 'function',
            panelEditRecord: typeof window.panel__editrecord === 'function',
            tpLibraryHide: typeof window.tp__library__hide === 'function',
            recordDel: typeof window.record__del === 'function',
            recordOnoff: typeof window.record__onoff === 'function'
        };
        console.log('[SHIFT DEBUG] Tilda API —Å—Ç–∞—Ç—É—Å:', api);
        return api;
    },
    
    testAddBlock: function(solutionCode) {
        const solution = SHIFT_SOLUTIONS.find(s => s.solutionCode === solutionCode);
        if (solution) {
            console.log('[SHIFT DEBUG] –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞:', solution.title);
            addBlockWithTildaAPI(solution, { tpAddRecord: true, panelEditRecord: true, tpLibraryHide: true });
        } else {
            console.error('[SHIFT DEBUG] –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', solutionCode);
        }
    },
    
    listBlocks: function() {
        const blocks = document.querySelectorAll('.record[data-record-cod^="SHF"], .record[data-record-cod^="T123_"]');
        console.log('[SHIFT DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–µ SHIFT –±–ª–æ–∫–∏:', blocks.length);
        blocks.forEach((block, index) => {
            const recId = block.id;
            const recordCod = block.getAttribute('data-record-cod');
            const title = block.getAttribute('data-title');
            console.log(`[SHIFT DEBUG] –ë–ª–æ–∫ ${index + 1}:`, { recId, recordCod, title });
        });
        return blocks;
    }
};

console.log('[SHIFT] –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.shiftDebug');

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initShiftExtension() {
    console.log('[SHIFT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHIFT Extension...');
    
    try {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Tilda
        console.log('[SHIFT] –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Tilda...');
        const tildaLibraryContainer = await waitForElement('.tp-library__body');
        console.log('[SHIFT] –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Tilda –Ω–∞–π–¥–µ–Ω–∞');
        
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ SHIFT
        createShiftBlocks();
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        createShiftCategory();
        
        console.log('[SHIFT] SHIFT Extension —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        
    } catch (error) {
        console.error('[SHIFT] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// ============================================================================
// –ó–ê–ü–£–°–ö
// ============================================================================

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initShiftExtension);
} else {
    initShiftExtension();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.SHIFT_EXTENSION = {
    init: initShiftExtension,
    solutions: SHIFT_SOLUTIONS,
    createBlocks: createShiftBlocks,
    createCategory: createShiftCategory
};
